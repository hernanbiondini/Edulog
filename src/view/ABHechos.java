/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * ABHechos.java
 *
 * Created on 25-nov-2011, 19:22:34
 */
package view;

import Controller.PredicadoController;
import Controller.ReglaController;
import Controller.SujetoController;
import Controller.HechoController;
import Controller.SuliController;
import Model.Hecho;
import Model.Predicado;
import Model.Regla;
import Model.Sujeto;
import java.awt.Color;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.jdesktop.observablecollections.ObservableCollections;
import util.ModuloExterno;

/**
 *
 * @author Hernan
 */
public class ABHechos extends javax.swing.JDialog {

    /**
     * Creates new form ABHechos
     */
    public ABHechos(java.awt.Frame parent, boolean modal) throws IOException {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent);
        cambioSet();

        ArrayList<Color> colores = new ArrayList<Color>();
        ArrayList<String> tooltipsText = new ArrayList<String>();
        for (Object p : suj) {
            Sujeto r = new Sujeto();
            r = (Sujeto) p;
            tooltipsText.add(r.getNat());//C
            Color rojo = new Color(255, 0, 0);
            colores.add(rojo);
        }
        colors = new Color[colores.size()];
        tools = new String[colores.size()];//C
        for (int j = 0; j < colores.size(); j++) {
            colors[j] = colores.get(j);
            tools[j] = tooltipsText.get(j);//C
        }
        this.jComboBox3.setRenderer(new ABHechos.MyRenderer());
        this.jComboBox5.setRenderer(new ABHechos.MyRenderer());

        ArrayList<Color> colores2 = new ArrayList<Color>();
        ArrayList<String> tooltipsText2 = new ArrayList<String>();

        for (Object p : predicados) {
            Predicado r = new Predicado();
            r = (Predicado) p;
            if (r.getTipo() == 1) {
                tooltipsText2.add(r.getNat());//C
                Color darkGreen = new Color(0, 75, 0);
                colores2.add(darkGreen);
            } else {
                tooltipsText2.add(r.getNat());//C
                Color darkGreen = new Color(0, 175, 0);
                colores2.add(darkGreen);
            }
        }
        colors2 = new Color[colores2.size()];
        tools2 = new String[colores2.size()];//C
        for (int j = 0; j < colores2.size(); j++) {
            colors2[j] = colores2.get(j);
            tools2[j] = tooltipsText2.get(j);//C
        }
        this.jComboBox4.setRenderer(new ABHechos.MyRenderer2());
        this.conf();
        this.jButton4.setVisible(false);
        if (this.getServicio_externo().trim().equalsIgnoreCase("SI")) {
            this.jButton4.setVisible(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        sujeto1 = new Model.Sujeto();
        sujeto2 = new Model.Sujeto();
        predicado1 = new Model.Predicado();
        suj = ObservableCollections.observableList(SujetoController.getInstance().getAllSujeto());
        predicados = ObservableCollections.observableList(PredicadoController.getInstance().getAllPredicado2());
        hecho1 = new Model.Hecho();
        hechos = ObservableCollections.observableList(HechoController.getInstance().getAllHecho());
        sulis = ObservableCollections.observableList(SuliController.getInstance().getAllSuli());
        suli1 = new Model.Suli();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jComboBox4 = new javax.swing.JComboBox();
        jComboBox5 = new javax.swing.JComboBox();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hechos");
        setResizable(false);

        jTabbedPane1.setToolTipText("Hechos");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Sujeto");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Predicado");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Sujeto ");

        jComboBox3.setMaximumRowCount(25);

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, suj, jComboBox3);
        bindingGroup.addBinding(jComboBoxBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sujeto1, org.jdesktop.beansbinding.ObjectProperty.create(), jComboBox3, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jComboBox4.setMaximumRowCount(25);

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, predicados, jComboBox4);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, predicado1, org.jdesktop.beansbinding.ObjectProperty.create(), jComboBox4, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jComboBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });

        jComboBox5.setMaximumRowCount(25);

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, suj, jComboBox5);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sujeto2, org.jdesktop.beansbinding.ObjectProperty.create(), jComboBox5, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/iconos/settings51 (Copiar).png"))); // NOI18N
        jButton6.setText("Formar hecho");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/iconos/floppy20 (Copiar).png"))); // NOI18N
        jButton7.setText("Guardar hecho");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Hecho:");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/iconos/Gnome-Edit-Clear-64.png"))); // NOI18N
        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jCheckBox2.setText("Negaci√≥n");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("MV Boli", 0, 15)); // NOI18N
        jTextArea1.setRows(1);
        jTextArea1.setAutoscrolls(false);
        jScrollPane2.setViewportView(jTextArea1);

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jCheckBox1.setText("Crear inverso");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jCheckBox3.setText("Crear relaci√≥n opuesta");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jButton4.setText("Modulo Externo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jCheckBox1)
                                        .addGap(42, 42, 42)
                                        .addComponent(jCheckBox3))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addGap(55, 55, 55)
                                                .addComponent(jCheckBox2)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jCheckBox2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox3))
                .addGap(30, 30, 30)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );

        jTabbedPane1.addTab("Hechos", jPanel3);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, hechos, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("C√≥digo");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nat}"));
        columnBinding.setColumnName("Hecho");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${pro}"));
        columnBinding.setColumnName("Pro");
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, hecho1, org.jdesktop.beansbinding.ObjectProperty.create(), jTable1, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setMinWidth(0);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/iconos/delete84 (Copiar).png"))); // NOI18N
        jButton3.setText("Borrar base de hechos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/iconos/delete84 (Copiar).png"))); // NOI18N
        jButton9.setText("Borrar hecho");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Base de hechos");

        jButton1.setText("S - P -V");
        jButton1.setToolTipText("Sujetos, predicados y variables.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9)
                            .addComponent(jButton3))
                        .addGap(19, 19, 19)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(123, 123, 123))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel10)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton9)
                            .addComponent(jButton1))
                        .addGap(27, 27, 27)
                        .addComponent(jButton3)
                        .addGap(30, 30, 30))))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        Object[] options = {"Si", "No", "Cancelar"};
        int n = JOptionPane.showOptionDialog(this, "Esta seguro que desea eliminar la base de hechos?", "Borrando...", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
        if (JOptionPane.OK_OPTION == n) {
            try {
                HechoController.getInstance().deletetAllHecho();
                consistenciaH();
                refresh();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println("Exception: " + e.getMessage());
            }
        }
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if ((suj.size() > 0) && (predicados.size() > 0)) {
            consulta = "";
            inversaN = "";
            inversaP = "";
            this.jTextArea1.setText("");

            // -------------------------------------------------- Consulta ----------------------------------------------------
            predicado1 = (Predicado) jComboBox4.getSelectedItem();
            sujeto1 = (Sujeto) jComboBox3.getSelectedItem();
            sujeto2 = (Sujeto) jComboBox5.getSelectedItem();

            // Logica negaci√≥n
            String conectorN = " ";
            String conectorP = "";
            String conectorPC = "";
            if (this.jCheckBox2.isSelected()) {
                conectorN = " NO ";
                conectorP = "not(";
                conectorPC = ")";
            }

            if (predicado1.getTipo() == 1) { // Tipo 1
                jTextArea1.setText(sujeto1.getNat() + conectorN + predicado1.getNat());
                consulta = conectorP + predicado1.getPro() + "(" + sujeto1.getPro() + ")" + conectorPC;
            } else { // Tipo 2

                jTextArea1.setText(sujeto1.getNat() + conectorN + predicado1.getNat());
                consulta = conectorP + predicado1.getPro() + "(" + sujeto1.getPro();

                jTextArea1.setText(jTextArea1.getText() + " " + sujeto2.getNat());
                consulta = consulta + "," + sujeto2.getPro() + ")" + conectorPC;

                if (this.jCheckBox1.isSelected()) {
                    inversaN = sujeto2.getNat() + conectorN + predicado1.getNat();
                    inversaP = conectorP + predicado1.getPro() + "(" + sujeto2.getPro();

                    inversaN = inversaN + " " + sujeto1.getNat();
                    inversaP = inversaP + "," + sujeto1.getPro() + ")" + conectorPC;

                    System.out.println(" ");
                    System.out.println("Hecho inverso natural: " + inversaN);
                    System.out.println("Hecho inverso prolog: " + inversaP);
                    System.out.println(" ");
                }

                if (this.jCheckBox3.isSelected()) {
                    if (predicado1.getOpuestoPro().trim().equalsIgnoreCase("") == false) {

                        inversaN = sujeto2.getNat() + conectorN + predicado1.getOpuestoNat();
                        inversaP = conectorP + predicado1.getOpuestoPro() + "(" + sujeto2.getPro();
                        inversaN = inversaN + " " + sujeto1.getNat();
                        inversaP = inversaP + "," + sujeto1.getPro() + ")" + conectorPC;

                        System.out.println(" ");
                        System.out.println("Hecho opuesto natural: " + inversaN);
                        System.out.println("Hecho opuesto prolog: " + inversaP);
                        System.out.println(" ");
                    }

                }

            }

            System.out.println(" ");
            System.out.println("Hecho natural: " + this.jTextArea1.getText());
            System.out.println("Hecho prolog: " + consulta);
            System.out.println(" ");
        } else {
            JOptionPane.showMessageDialog(this, "Datos insuficientes para formar un hecho!", "Atenci√≥n", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (jTextArea1.getText().equalsIgnoreCase(".")) {
            JOptionPane.showMessageDialog(this, "Por favor forme un hecho", "Atenci√≥n", JOptionPane.ERROR_MESSAGE);
        } else {
            hecho1.setPro(consulta);
            hecho1.setNat(jTextArea1.getText());
            try {
                HechoController.getInstance().guardar(hecho1);
                if (inversaN.trim().equals("") == false) {
                    hecho1.setPro(inversaP);
                    hecho1.setNat(inversaN);
                    hecho1.setExterno(0);
                    HechoController.getInstance().guardar(hecho1);
                }
                PredicadoController.getInstance().afectarPredicadoC(predicado1.getId());
                consistencia();
                refresh();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println("Exception: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextArea1.setText(".");
        consulta = "";
        inversaN = "";
        inversaP = "";
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        this.hecho1 = new Hecho();
        int linea = jTable1.getSelectedRow();
        int iidd = (Integer) jTable1.getValueAt(linea, 0);
        String nom = jTable1.getValueAt(linea, 1).toString();
        String pro = jTable1.getValueAt(linea, 2).toString();
        hecho1.setId(iidd);
        hecho1.setNat(nom);
        hecho1.setPro(pro);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if (this.hecho1.getId() == 0) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un hecho de la tabla", "Borrar", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Se borra el hecho de la base de datos
            Object[] options = {"Si", "No", "Cancelar"};
            int n = JOptionPane.showOptionDialog(this, "Esta seguro que desea eliminar el hecho?", "Borrando...", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
            if (JOptionPane.OK_OPTION == n) {
                try {
                    String sentencia = "";
                    sentencia = hecho1.getPro();
                    HechoController.getInstance().borrar(hecho1);
                    consistencia();
                    String predicado = "";
                    int ifp = sentencia.indexOf("(");
                    predicado = sentencia.substring(0, ifp);
                    if (this.buscarPl(predicado) == false) {
                        System.out.println("desafectarPredicadoC");
                        PredicadoController.getInstance().desafectarPredicadoC(predicado);
                    }
                    refresh();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    System.out.println("Exception: " + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jComboBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged
        this.jComboBox5.setEnabled(true);
        Predicado p = new Predicado();
        p = (Predicado) jComboBox4.getSelectedItem();
        if (p.getTipo() == 1) {
            this.jComboBox5.setEnabled(false);
            this.jCheckBox1.setEnabled(false);
        } else {
            this.jCheckBox1.setEnabled(true);
        }
    }//GEN-LAST:event_jComboBox4ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            cambio();
            SPV s;
            s = new SPV(null, true);
            s.setVisible(true);
            this.dispose();
        } catch (IOException ex) {
            Logger.getLogger(Reglas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        this.jCheckBox3.setSelected(false);
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        this.jCheckBox1.setSelected(false);
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        me.procesarHechosExternos();
    }//GEN-LAST:event_jButton4ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Model.Hecho hecho1;
    private java.util.List hechos;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private Model.Predicado predicado1;
    private java.util.List predicados;
    private java.util.List suj;
    private Model.Sujeto sujeto1;
    private Model.Sujeto sujeto2;
    private Model.Suli suli1;
    private java.util.List sulis;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    private String consulta;
    private String inversaN;
    private String inversaP;
    Color colors[];
    Color colors2[];
    String tools[];//C
    String tools2[];//C
    private ModuloExterno me = new ModuloExterno();
    private String servicio_externo = "";
    private String servicio_externo_consulta = "";
    private String url_servicio_externo = "";

    public String getServicio_externo() {
        return servicio_externo;
    }

    public void setServicio_externo(String servicio_externo) {
        this.servicio_externo = servicio_externo;
    }

    public String getServicio_externo_consulta() {
        return servicio_externo_consulta;
    }

    public void setServicio_externo_consulta(String servicio_externo_consulta) {
        this.servicio_externo_consulta = servicio_externo_consulta;
    }

    public String getUrl_servicio_externo() {
        return url_servicio_externo;
    }

    public void setUrl_servicio_externo(String url_servicio_externo) {
        this.url_servicio_externo = url_servicio_externo;
    }

    public void refresh() {

        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();
        hechos = ObservableCollections.observableList(HechoController.getInstance().getAllHecho());

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, hechos, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("C√≥digo");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nat}"));
        columnBinding.setColumnName("Hecho");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${pro}"));
        columnBinding.setColumnName("Pro");
        columnBinding.setEditable(false);
        jTableBinding.bind();
        bindingGroup.addBinding(jTableBinding);

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setMinWidth(0);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        bindingGroup.bind();
        pack();

    }

    public void consistencia() {
        String consulta = "";
        // Se borra el archivo .pl
        try {
            java.io.File file = new java.io.File("family.pl");
            file.delete();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Se vuelve a escribir recorriendo la base de hechos
        List<Hecho> al = new ArrayList();
        //al = HechoController.getInstance().getAllHecho3();
        al = HechoController.getInstance().getAllHechopro();

        for (Iterator<Hecho> it = al.iterator(); it.hasNext();) {
            Hecho h = it.next();
            consulta = h.getPro();
            FileWriter archivo = null;
            PrintWriter pw = null;
            try {
                archivo = new FileWriter("family.pl", true);

            } catch (IOException ex) {
                Logger.getLogger(ABHechos.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            pw = new PrintWriter(archivo);
            pw.println(consulta + ".");
            try {
                archivo.close();

            } catch (IOException ex) {
                Logger.getLogger(ABHechos.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }//for
// Se vuelve a escribir recorriendo la base de reglas
        List<Regla> al2 = new ArrayList();
        //al2 = ReglaController.getInstance().getAllRegla2();
        al2 = ReglaController.getInstance().getAllReglaPro();

        for (Iterator<Regla> it = al2.iterator(); it.hasNext();) {

            Regla h = it.next();
            consulta = h.getPro();
            FileWriter archivo = null;
            PrintWriter pw = null;
            try {
                archivo = new FileWriter("family.pl", true);

            } catch (IOException ex) {
                Logger.getLogger(ABHechos.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            pw = new PrintWriter(archivo);
            pw.println(consulta + ".");
            try {
                archivo.close();

            } catch (IOException ex) {
                Logger.getLogger(ABHechos.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }//for

    }

    public void consistenciaH() {
        String consulta = "";
        // Se borra el archivo .pl
        try {
            java.io.File file = new java.io.File("family.pl");
            file.delete();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

// Se vuelve a escribir recorriendo la base de reglas
        List<Regla> al2 = new ArrayList();
        //al2 = ReglaController.getInstance().getAllRegla2();
        al2 = ReglaController.getInstance().getAllReglaPro();

        for (Iterator<Regla> it = al2.iterator(); it.hasNext();) {

            Regla h = it.next();
            consulta = h.getPro();
            FileWriter archivo = null;
            PrintWriter pw = null;
            try {
                archivo = new FileWriter("family.pl", true);

            } catch (IOException ex) {
                Logger.getLogger(ABHechos.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            pw = new PrintWriter(archivo);
            pw.println(consulta + ".");
            try {
                archivo.close();

            } catch (IOException ex) {
                Logger.getLogger(ABHechos.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }//for

    }

    private void cambio() throws FileNotFoundException, IOException {
        Properties p = new Properties();
        p.load(new FileInputStream("conf.txt"));
        p.setProperty("cambio", "true");
        FileOutputStream out = new FileOutputStream("conf.txt");
        p.save(out, "/* properties updated */");
    }

    public void cambioSet() throws IOException {
        Properties p = new Properties();
        p.load(new FileInputStream("conf.txt"));
        p.setProperty("cambio", "false");
        FileOutputStream out = new FileOutputStream("conf.txt");
        p.save(out, "/* properties updated */");
    }

    class MyRenderer extends DefaultListCellRenderer {

        // METODO RENDER
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel lbl = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (index > -1) {
                lbl.setForeground(colors[index]);
                lbl.setToolTipText(tools[index]);//C
            }
            return lbl;
        }
    }

    // RENDER
    class MyRenderer2 extends DefaultListCellRenderer {

        // METODO RENDER
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel lbl = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (index > -1) {
                lbl.setForeground(colors2[index]);
                lbl.setToolTipText(tools2[index]);//C
            }
            return lbl;
        }
    }

    private boolean buscarPl(String predicado) {
        String codigo = new String(), path = "family.pl";
        File archivo = new File(path);
        boolean encontrado = false;
        FileReader fr = null;
        BufferedReader entrada = null;
        try {
            fr = new FileReader(path);
            entrada = new BufferedReader(fr);
            System.out.println("buscarPl");
            while (entrada.ready()) {
                codigo = entrada.readLine();
                System.out.println(codigo);
                if (codigo.contains(predicado)) {
                    encontrado = true;
                    System.out.println("encontrado");
                    break;
                }
            }
            System.out.println("buscarPl2");
            return encontrado;
        } catch (IOException e) {
            System.out.println("IOException: " + e.getMessage());
            e.printStackTrace();
            return encontrado;
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
                System.out.println("Exception: " + e2.getMessage());
                return encontrado;
            }
        }
    }

    public void conf() {
        try {
            Properties p = new Properties();
            p.load(new FileInputStream("conf.txt"));
            this.setServicio_externo(p.getProperty("servicio_externo"));
        } catch (Exception e) {
            System.out.println("Error Configuracion: " + e);
        }

    }
}
