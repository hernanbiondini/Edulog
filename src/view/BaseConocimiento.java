/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import Controller.HechoController;
import Controller.HereController;
import Controller.ReglaController;
import Model.Hecho;
import Model.Regla;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.observablecollections.ObservableCollections;

/**
 *
 * @author Hernan
 */
public class BaseConocimiento extends javax.swing.JDialog {

    /**
     * Creates new form BaseConocimiento
     */
    public BaseConocimiento(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent); 
        // Se vuelve a escribir el .pl leyendo hechos y reglas de la base de datos
        consistencia();
        // Se lee el contenido del .pl recien escrito
        leerPl();
        jTextArea1.setEditable(false);
        jTextArea1.setBackground(Color.WHITE);
        conf();
        tabDelete();
    }
    
    public BaseConocimiento(java.awt.Frame parent, boolean modal, String modo) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent); 
        // Se vuelve a escribir el .pl leyendo hechos y reglas de la base de datos
        consistencia();
        // Se lee el contenido del .pl recien escrito
        leerPl();
        jTextArea1.setEditable(false);
        jTextArea1.setBackground(Color.WHITE);
        jTabbedPane1.removeTabAt(0);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        heres = ObservableCollections.observableList(HereController.getInstance().getAllHeRe());
        heRe1 = new Model.HeRe();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Base de Conocimiento");
        setResizable(false);

        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, heres, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nombre}"));
        columnBinding.setColumnName("");
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, heRe1, org.jdesktop.beansbinding.ObjectProperty.create(), jTable1, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(3000);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1380, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Natural", jPanel1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1380, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Prolog", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseConocimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseConocimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseConocimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseConocimiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BaseConocimiento dialog = new BaseConocimiento(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Model.HeRe heRe1;
    private java.util.List heres;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
private String modo = "";
    private void leerPl() {
        String codigo = new String(), path = "family.pl";
        File archivo = new File(path);

        FileReader fr = null;
        BufferedReader entrada = null;
        try {
            fr = new FileReader(path);
            entrada = new BufferedReader(fr);

            while (entrada.ready()) {
                codigo += entrada.readLine();
                codigo = codigo +"\n";
            }
            jTextArea1.setText(codigo);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }
    public void consistencia() {
        String consulta = "";
        // Se borra el archivo .pl
        try {
            java.io.File file = new java.io.File("family.pl");
            file.delete();

            // Se vuelve a escribir recorriendo la base de hechos
            List<Hecho> al = new ArrayList();
            //al = HechoController.getInstance().getAllHecho3();
            al = HechoController.getInstance().getAllHechopro();

            consulta = " % Hechos.";
            FileWriter archivo = null;
            PrintWriter pw = null;
            archivo = new FileWriter("family.pl", true);
            pw = new PrintWriter(archivo);
            pw.println(consulta);
            archivo.close();

            for (Iterator<Hecho> it = al.iterator(); it.hasNext();) {

                Hecho h = it.next();
                consulta = h.getPro();
                archivo = null;
                pw = null;

                archivo = new FileWriter("family.pl", true);

                pw = new PrintWriter(archivo);
                pw.println(consulta + ".");

                archivo.close();

            }//for

            consulta = "\n";
            archivo = null;
            pw = null;
            archivo = new FileWriter("family.pl", true);
            pw = new PrintWriter(archivo);
            pw.println(consulta);
            archivo.close();

            // Se vuelve a escribir recorriendo la base de reglas
            List<Regla> al2 = new ArrayList();
            //al2 = ReglaController.getInstance().getAllRegla();
            al2 = ReglaController.getInstance().getAllReglaPro();

            consulta = "% Reglas.";
            archivo = null;
            pw = null;
            archivo = new FileWriter("family.pl", true);
            pw = new PrintWriter(archivo);
            pw.println(consulta);
            archivo.close();

            for (Iterator<Regla> it = al2.iterator(); it.hasNext();) {

                Regla h = it.next();
                consulta = h.getPro();
                archivo = null;
                pw = null;

                archivo = new FileWriter("family.pl", true);

                pw = new PrintWriter(archivo);
                pw.println(consulta + ".");

                archivo.close();

            }//for
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }
    public void conf() {
        Properties config = new Properties();
        try {
            config.load(new FileInputStream("conf.txt"));
        } catch (IOException ex) {
            Logger.getLogger(Modo.class.getName()).log(Level.SEVERE, null, ex);
        }

        modo = config.getProperty("modo").trim();
    }

    private void tabDelete() {
        if (modo.equals("manual")) {
        } else {
            jTabbedPane1.removeTabAt(1);
        }
    }
}
